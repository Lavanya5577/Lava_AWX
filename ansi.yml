---
- name: Handle Datadog Alerts and Manage ServiceNow Cases
  hosts: localhost
  gather_facts: yes
  vars:
    sys_id: ""
    service_now:
      instance: "dev247928.service-now.com"
      username: "admin"
      password: "%ml4Vs9RXE/s"
      case_table: "u_case1"
      incident_table: "incident"
    # datadog:
    #   api_key: "9cae63ce64fcea730e71e8a71e572beb"
    #   app_key: "cca1ca0fe667e3ebd44f4bcc01c7f042a99b1831"
    #   api_url: "https://api.us5.datadoghq.com/api/v1/monitor"
    recovery_window: 30  # 5 minutes in seconds
  tasks:
    - name: Wait for recovery window (5 minutes)
      ansible.builtin.pause:
        seconds: "{{ recovery_window }}"
        
    - name: Fetch case details from ServiceNow using sys_id
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.case_table }}/{{ sys_id }}"
        method: GET
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: case_details

    - name: Debug case details
      ansible.builtin.debug:
        var: case_details.json

    - name: Check if case is resolved
      ansible.builtin.set_fact:
        case_status: "{{ case_details.json.result.u_state }}"

    - name: Terminate AWX flow if case is resolved
      meta: end_play
      when: case_status == "resolved"

    - name: Create an incident if case is still open
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.incident_table }}"
        method: POST
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          short_description: "Incident for unresolved case {{ sys_id }}"
          description: "The case is still open in ServiceNow. Creating an incident."
          impact: "2"
          urgency: "2"
        status_code: [200, 201]
      when: case_status != "resolved"











      
    # - name: Debug case details
    #   ansible.builtin.debug:
    #     var: case_details
    # - name: Extract alert ID from case details
    #   ansible.builtin.set_fact:
    #     alert_id: "{{ case_details.json.result.u_id }}"
    
    # - name: Fetch alert details from Datadog
    #   ansible.builtin.uri:
    #     url: "{{ datadog.api_url }}/{{ alert_id }}"
    #     method: GET
    #     headers:
    #       DD-API-KEY: "{{ datadog.api_key }}"
    #       DD-APPLICATION-KEY: "{{ datadog.app_key }}"
    #     return_content: yes
    #   register: alert_details
    # - name: Debug alert details
    #   ansible.builtin.debug:
    #     var: alert_details
    # - name: Check if alert is resolved
    #   ansible.builtin.uri:
    #     url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.case_table }}/{{ sys_id }}"
    #     method: PATCH
    #     user: "{{ service_now.username }}"
    #     password: "{{ service_now.password }}"
    #     force_basic_auth: yes
    #     headers:
    #       Content-Type: "application/json"
    #     body_format: json
    #     body:
    #       state: "resolved"
    #       work_notes: "Alert resolved in Datadog. Case closed."
    #     status_code: [200, 201]
    #   when: alert_details.json.overall_state != "Alert"
    # - name: Create incident if alert is still active
    #   ansible.builtin.uri:
    #     url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.incident_table }}"
    #     method: POST
    #     user: "{{ service_now.username }}"
    #     password: "{{ service_now.password }}"
    #     force_basic_auth: yes
    #     headers:
    #       Content-Type: "application/json"
    #     body_format: json
    #     body:
    #       short_description: "Datadog Alert - {{ alert_details.json.name }} (Incident Created)"
    #       description: "The alert is still active after the recovery window. Escalating to an incident."
    #       impact: "2"
    #       urgency: "2"
    #     status_code: [200, 201]
    #   when: alert_details.json.overall_state == "Alert"
