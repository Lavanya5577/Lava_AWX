- name: Handle Datadog Alerts and Manage ServiceNow Cases
  hosts: localhost
  gather_facts: no
  vars:
    sys_id3: ""  # This is empty! You need a valid sys_id or a different approach
    service_now:
      instance: "dev247928.service-now.com"
      username: "admin"
      password: "%ml4Vs9RXE/s"
      case_table: "u_case1"
      incident_table: "incident"
    datadog:
      api_key: "9cae63ce64fcea730e71e8a71e572beb"
      app_key: "cca1ca0fe667e3ebd44f4bcc01c7f042a99b1831"
      api_url: "https://api.us5.datadoghq.com/api/v1/monitor"
    recovery_window: 300  # 5 minutes in seconds
  tasks:
    # First check if sys_id3 is provided
    - name: Check if sys_id is provided
      ansible.builtin.fail:
        msg: "sys_id3 is required but not provided"
      when: sys_id3 == ""
      ignore_errors: yes
      register: sys_id_check

    # Option 1: If you need to query cases instead of accessing by sys_id
    - name: Get cases from ServiceNow
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.case_table }}?sysparm_limit=1"  # Query most recent case or add appropriate query
        method: GET
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: case_list
      when: sys_id_check.failed

    # Set sys_id from query results if needed
    - name: Set sys_id from query results
      ansible.builtin.set_fact:
        sys_id3: "{{ case_list.json.result[0].sys_id }}"
      when: sys_id_check.failed and case_list.json.result | length > 0

    # Now continue with fetching the specific case
    - name: Fetch case details from ServiceNow using sys_id
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.case_table }}/{{ sys_id3 }}"
        method: GET
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        return_content: yes
      register: case_details
      when: sys_id3 != ""

    - name: Debug case details
      ansible.builtin.debug:
        var: case_details
      when: sys_id3 != ""

    - name: Extract alert ID from case details
      ansible.builtin.set_fact:
        alert_id: "{{ case_details.json.result.u_alert_id }}"
      when: sys_id3 != "" and case_details.status == 200

    - name: Wait for recovery window (5 minutes)
      ansible.builtin.pause:
        seconds: "{{ recovery_window }}"
      when: sys_id3 != "" and case_details.status == 200

    - name: Fetch alert details from Datadog
      ansible.builtin.uri:
        url: "{{ datadog.api_url }}/{{ alert_id }}"
        method: GET
        headers:
          DD-API-KEY: "{{ datadog.api_key }}"
          DD-APPLICATION-KEY: "{{ datadog.app_key }}"
        return_content: yes
      register: alert_details
      when: sys_id3 != "" and case_details.status == 200

    - name: Debug alert details
      ansible.builtin.debug:
        var: alert_details
      when: sys_id3 != "" and case_details.status == 200

    - name: Check if alert is resolved
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.case_table }}/{{ sys_id3 }}"
        method: PATCH
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          state: "resolved"
          work_notes: "Alert resolved in Datadog. Case closed."
        status_code: [200, 201]
      when: sys_id3 != "" and case_details.status == 200 and alert_details.json.overall_state != "Alert"

    - name: Create incident if alert is still active
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.incident_table }}"
        method: POST
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          short_description: "Datadog Alert - {{ alert_details.json.name }} (Incident Created)"
          description: "The alert is still active after the recovery window. Escalating to an incident."
          impact: "2"
          urgency: "2"
        status_code: [200, 201]
      when: sys_id3 != "" and case_details.status == 200 and alert_details.json.overall_state == "Alert"
